name: Test CI

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
      
    - name: Fix Jest configuration
      run: |
        # Check Jest config to find the setupFilesAfterEnv path
        if [ -f "jest.config.js" ]; then
          # Update Jest config to use the correct case (setupTestDb.ts instead of setupTestDB.ts)
          sed -i 's/setupTestDB\.ts/setupTestDb.ts/g' jest.config.js
          cat jest.config.js
        elif [ -f "jest.config.ts" ]; then
          sed -i 's/setupTestDB\.ts/setupTestDb.ts/g' jest.config.ts
          cat jest.config.ts
        else
          # Look in package.json if no jest.config file exists
          sed -i 's/setupTestDB\.ts/setupTestDb.ts/g' package.json
          grep -A 10 "jest" package.json || echo "No Jest config found in package.json"
        fi
        
    - name: Update setup file for CI
      run: |
        # Modify the setup file to use postgres user instead of ronaldcoello
        if [ -f "src/tests/setupTestDb.ts" ]; then
          sed -i 's/ronaldcoello/postgres/g' src/tests/setupTestDb.ts
          cat src/tests/setupTestDb.ts
        fi
        
    - name: Create .env.test file
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" > .env.test
        
    - name: Generate Prisma client
      run: |
        SCHEMA_PATH=$(find . -name "schema.prisma" | head -n 1)
        if [ -n "$SCHEMA_PATH" ]; then
          echo "Found schema at $SCHEMA_PATH"
          npx prisma generate --schema="$SCHEMA_PATH"
        else
          echo "Schema not found"
          exit 1
        fi
      
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        NODE_ENV: test