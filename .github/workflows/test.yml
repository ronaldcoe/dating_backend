name: Test CI

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Jest configuration
      run: |
        echo "Checking for Jest configuration..."
        if [ -f "jest.config.js" ]; then
          cat jest.config.js
        elif [ -f "jest.config.ts" ]; then
          cat jest.config.ts
        else
          echo "Looking for Jest config in package.json:"
          grep -A 10 "jest" package.json || echo "No Jest config found"
        fi
        
    - name: Ensure test setup file exists
      run: |
        mkdir -p src/tests
        if [ ! -f "src/tests/setupTestDB.ts" ]; then
          echo "Creating basic setupTestDB.ts file..."
          echo "// Basic test DB setup created by CI
          import { PrismaClient } from '@prisma/client';
          
          const prisma = new PrismaClient();
          
          beforeAll(async () => {
            // Connect to the test database
            await prisma.$connect();
          });
          
          afterAll(async () => {
            // Disconnect after tests
            await prisma.$disconnect();
          });
          
          // Clean database between tests
          afterEach(async () => {
            // Add table cleanup if needed
          });" > src/tests/setupTestDB.ts
        fi
      
    - name: Generate Prisma client
      run: |
        # Check where your schema.prisma file is actually located
        SCHEMA_PATH=$(find . -name "schema.prisma" -type f | head -n 1)
        if [ -n "$SCHEMA_PATH" ]; then
          echo "Found schema at $SCHEMA_PATH"
          npx prisma generate --schema="$SCHEMA_PATH"
        else
          echo "No schema.prisma file found. Creating a temporary one for testing."
          mkdir -p prisma
          echo "
          generator client {
            provider = \"prisma-client-js\"
          }
          datasource db {
            provider = \"postgresql\"
            url      = env(\"DATABASE_URL\")
          }" > prisma/schema.prisma
          npx prisma generate
        fi
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        NODE_ENV: test